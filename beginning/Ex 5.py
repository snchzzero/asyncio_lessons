import asyncio

# Определение асинхронной функции (корутины) cook_dish(n), которая имитирует повара, готовящего блюдо.
# Используется корутина для того, чтобы конкурентно запускать несколько "поваров" и использовать время ожидания (приготовление) эффективно.

async def cook_dish(n):
    print(f"Повар {n} начинает готовить")       # Повар n начинает готовить
    await asyncio.sleep(n*2)                      # Повар готовит блюдо n секунд. asyncio.sleep(n) используется для имитации задержки, которая требуется для приготовления блюда.
    print(f"Повар {n} закончил готовить")       # Повар n закончил готовить
    return f"Блюдо от повара {n}"               # Возвращает строку, указывающую, что блюдо от повара n готово.

# Создание задач из корутин, которые представляют собой приготовление блюда каждым поваром.
async def main():
    tasks = [asyncio.create_task(cook_dish(n)) for n in range(1, 4)]  # Создаются задачи для каждого повара (от 1 до 3). Используется create_task для запуска корутины.
    print(await asyncio.gather(*tasks))                               # Ожидает завершения всех задач, затем выводит результат. asyncio.gather используется для ожидания всех корутин, затем собирает их результаты в список.

# Запуск главной корутины
asyncio.run(main())
